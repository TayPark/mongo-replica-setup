version: '3.8'

networks:
  backend:
    driver: bridge

services: 
  mongodb1:
    container_name: mongodb1
    image: mongo
    networks:
      - backend
    volumes:
      - ./data/db-01:/data/db
      - ./dbinit.sh:/docker-entrypoint-initdb.d/dbinit.sh:ro
      - ./mongodb.key:/keys/mongodb.key:ro
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_INITDB_ROOT_USERNAME}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_INITDB_ROOT_PASSWORD}
      MONGO_INITDB_DATABASE: ${MONGO_INITDB_DATABASE}
    ports:
      - 27017:27017
    command: ["--bind_ip_all", "--replSet", "rs0", "--keyFile", "/keys/mongodb.key"]
    restart: unless-stopped

  mongodb2:
    container_name: mongodb2
    image: mongo
    networks:
      - backend
    volumes:
      - ./data/db-02:/data/db
      - ./dbinit.sh:/docker-entrypoint-initdb.d/dbinit.sh:ro
      - ./mongodb.key:/keys/mongodb.key:ro
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_INITDB_ROOT_USERNAME}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_INITDB_ROOT_PASSWORD}
      MONGO_INITDB_DATABASE: ${MONGO_INITDB_DATABASE}
    ports:
      - 27018:27017
    command: ["--bind_ip_all", "--replSet", "rs0", "--keyFile", "/keys/mongodb.key"]
    restart: unless-stopped

  mongodb3:
    container_name: mongodb3
    image: mongo
    networks:
      - backend
    volumes:
      - ./data/db-03:/data/db
      - ./dbinit.sh:/docker-entrypoint-initdb.d/dbinit.sh:ro
      - ./mongodb.key:/keys/mongodb.key:ro
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_INITDB_ROOT_USERNAME}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_INITDB_ROOT_PASSWORD}
      MONGO_INITDB_DATABASE: ${MONGO_INITDB_DATABASE}
    ports:
      - 27019:27017
    command: ["--bind_ip_all", "--replSet", "rs0", "--keyFile", "/keys/mongodb.key"]
    restart: unless-stopped

  repl-helper:
    container_name: repl-helper
    image: repl-helper
    networks:
      - backend
    volumes: 
      - ./mongodb.key/:/keys/mongodb.key:ro
    depends_on:
      - mongodb1
      - mongodb2
      - mongodb3
  server:
    container_name: server
    build:
      context: ./server
    ports:
      - 3000:3000
    expose:
      - "3000"
    volumes: 
      - ./server:/app
    networks: 
      - backend
